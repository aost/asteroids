/* Generated by Opal 0.7.0.dev */
Opal.modules["thing"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_accessor', '$fetch', '$[]']);
  return (function($base, $super) {
    function $Thing(){};
    var self = $Thing = $klass($base, $super, 'Thing', $Thing);

    var def = self.$$proto, $scope = self.$$scope;

    self.$attr_accessor("position");

    return (def.$initialize = function(args) {
      var self = this;

      if (args == null) {
        args = $hash2([], {})
      }
      return self.position = args.$fetch("position", $scope.get('V')['$[]'](0, 0));
    }, nil) && 'initialize';
  })(self, null)
};

/* Generated by Opal 0.7.0.dev */
Opal.modules["asteroid"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$[]', '$fetch', '$-', '$rand', '$move', '$wrap', '$+', '$*', '$>', '$-@', '$x', '$radius', '$x=', '$width', '$display', '$y', '$y=', '$height', '$<', '$distance_to', '$reject!', '$==', '$things', '$play', '$<<', '$new', '$stroke_color=', '$draw_polygon', '$private', '$/', '$push', '$translate', '$rotate_z', '$begin_shape', '$move_to', '$times', '$line_to', '$cos', '$sin', '$end_shape', '$stroke_shape', '$pop']);
  return (function($base, $super) {
    function $Asteroid(){};
    var self = $Asteroid = $klass($base, $super, 'Asteroid', $Asteroid);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.position = def.velocity = def.rotation = def.rotation_speed = def.side_count = nil;
    $opal.cdecl($scope, 'COLOR', $scope.get('C')['$[]']("#fff"));

    $opal.cdecl($scope, 'RADIUS_PER_SIDE', 8);

    $opal.cdecl($scope, 'DEATH_SOUND', $scope.get('Sound')['$[]']("split.wav"));

    def.$initialize = TMP_1 = function(args) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
      self.side_count = args.$fetch("side_count");
      self.rotation = 0;
      self.rotation_speed = self.$rand()['$-'](0.5);
      return self.velocity = $scope.get('V')['$[]'](self.$rand(50)['$-'](25), self.$rand(50)['$-'](25));
    };

    def.$update = function(elapsed, game) {
      var self = this;

      self.$move(elapsed);
      return self.$wrap(game);
    };

    def.$move = function(elapsed) {
      var self = this;

      self.position = self.position['$+'](self.velocity['$*'](elapsed));
      return self.rotation = self.rotation['$+'](self.rotation_speed['$*'](elapsed));
    };

    def.$wrap = function(game) {
      var $a, $b, self = this, left_overlap = nil, right_overlap = nil, top_overlap = nil, bottom_overlap = nil;

      if (((left_overlap = self.position.$x()['$-@']()['$-'](self.$radius())))['$>'](0)) {
        (($a = [game.$display().$width()['$-'](left_overlap)['$+'](self.$radius())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])
      } else if (((right_overlap = self.position.$x()['$-'](self.$radius())['$-'](game.$display().$width())))['$>'](0)) {
        (($a = [right_overlap['$-'](self.$radius())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])};
      if (((top_overlap = self.position.$y()['$-@']()['$-'](self.$radius())))['$>'](0)) {
        return (($a = [game.$display().$height()['$-'](top_overlap)['$+'](self.$radius())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
      } else if (((bottom_overlap = self.position.$y()['$-'](self.$radius())['$-'](game.$display().$height())))['$>'](0)) {
        return (($a = [bottom_overlap['$-'](self.$radius())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    };

    def['$colliding?'] = function(point) {
      var self = this;

      return self.position.$distance_to(point)['$<'](self.$radius());
    };

    def.$die = function(game) {
      var $a, $b, TMP_2, self = this;

      ($a = ($b = game.$things())['$reject!'], $a.$$p = (TMP_2 = function(t){var self = TMP_2.$$s || this;
if (t == null) t = nil;
      return t['$=='](self)}, TMP_2.$$s = self, TMP_2), $a).call($b);
      $scope.get('DEATH_SOUND').$play();
      if (self.side_count['$>'](3)) {
        game.$things()['$<<']($scope.get('Asteroid').$new($hash2(["position", "side_count", "velocity"], {"position": self.position, "side_count": self.side_count['$-'](1), "velocity": $scope.get('V')['$[]'](self.velocity.$y()['$-@'](), self.velocity.$x())['$*'](2)})));
        return game.$things()['$<<']($scope.get('Asteroid').$new($hash2(["position", "side_count", "velocity"], {"position": self.position, "side_count": self.side_count['$-'](1), "velocity": $scope.get('V')['$[]'](self.velocity.$y(), self.velocity.$x()['$-@']())['$*'](2)})));
        } else {
        return nil
      };
    };

    def.$draw = function(display) {
      var $a, $b, self = this;

      (($a = [$scope.get('COLOR')]), $b = display, $b['$stroke_color='].apply($b, $a), $a[$a.length-1]);
      return self.$draw_polygon(display, self.position, self.rotation, self.side_count, self.$radius());
    };

    self.$private();

    def.$radius = function() {
      var self = this;

      return self.side_count['$*']($scope.get('RADIUS_PER_SIDE'));
    };

    return (def.$draw_polygon = function(d, position, rotation, side_count, radius) {
      var $a, $b, TMP_3, self = this, angle_per = nil;

      angle_per = (($scope.get('Math')).$$scope.get('PI'))['$*'](2)['$/'](side_count);
      d.$push();
      d.$translate(self.position);
      d.$rotate_z(self.rotation);
      d.$begin_shape();
      d.$move_to($scope.get('V')['$[]'](radius, 0));
      ($a = ($b = side_count).$times, $a.$$p = (TMP_3 = function(i){var self = TMP_3.$$s || this;
if (i == null) i = nil;
      return d.$line_to($scope.get('V')['$[]'](radius['$*']($scope.get('Math').$cos(angle_per['$*'](i))), radius['$*']($scope.get('Math').$sin(angle_per['$*'](i)))))}, TMP_3.$$s = self, TMP_3), $a).call($b);
      d.$end_shape();
      d.$stroke_shape();
      return d.$pop();
    }, nil) && 'draw_polygon';
  })(self, $scope.get('Thing'))
};

/* Generated by Opal 0.7.0.dev */
Opal.modules["bullet"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$fetch', '$[]', '$move', '$wrap', '$collide', '$self_destruct', '$along!', '$*', '$/', '$>', '$-', '$-@', '$x', '$x=', '$+', '$width', '$display', '$y', '$y=', '$height', '$each', '$respond_to?', '$colliding?', '$die', '$reject!', '$==', '$things', '$stroke_color=', '$push', '$translate', '$rotate_z', '$stroke_rectangle', '$pop']);
  return (function($base, $super) {
    function $Bullet(){};
    var self = $Bullet = $klass($base, $super, 'Bullet', $Bullet);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.position = def.direction = def.size = def.age = nil;
    $opal.cdecl($scope, 'SPIN_SPEED', 0.6);

    $opal.cdecl($scope, 'MAX_AGE', 0.5);

    $opal.cdecl($scope, 'SPEED', 600);

    def.$initialize = TMP_1 = function(args) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
      self.direction = args.$fetch("direction");
      self.size = $scope.get('V')['$[]'](8, 8);
      return self.age = 0;
    };

    def.$update = function(elapsed, game) {
      var self = this;

      self.$move(elapsed);
      self.$wrap(game);
      self.$collide(game);
      return self.$self_destruct(elapsed, game);
    };

    def.$move = function(elapsed) {
      var self = this;

      return self.position['$along!'](self.direction, $scope.get('SPEED')['$*'](elapsed));
    };

    def.$wrap = function(game) {
      var $a, $b, self = this, half_size = nil, left_overlap = nil, right_overlap = nil, top_overlap = nil, bottom_overlap = nil;

      half_size = self.size['$/'](2);
      if (((left_overlap = self.position.$x()['$-@']()['$-'](half_size.$x())))['$>'](0)) {
        (($a = [game.$display().$width()['$-'](left_overlap)['$+'](half_size.$y())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])
      } else if (((right_overlap = self.position.$x()['$-'](half_size.$x())['$-'](game.$display().$width())))['$>'](0)) {
        (($a = [right_overlap['$-'](half_size.$y())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])};
      if (((top_overlap = self.position.$y()['$-@']()['$-'](half_size.$y())))['$>'](0)) {
        return (($a = [game.$display().$height()['$-'](top_overlap)['$+'](half_size.$y())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
      } else if (((bottom_overlap = self.position.$y()['$-'](half_size.$y())['$-'](game.$display().$height())))['$>'](0)) {
        return (($a = [bottom_overlap['$-'](half_size.$y())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    };

    def.$collide = function(game) {try {

      var $a, $b, TMP_2, self = this;

      return ($a = ($b = game.$things()).$each, $a.$$p = (TMP_2 = function(thing){var self = TMP_2.$$s || this, $a, $b, TMP_3;
        if (self.position == null) self.position = nil;
if (thing == null) thing = nil;
      if ((($a = ($b = thing['$respond_to?']("colliding?"), $b !== false && $b !== nil ?thing['$colliding?'](self.position) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          thing.$die(game);
          ($a = ($b = game.$things())['$reject!'], $a.$$p = (TMP_3 = function(t){var self = TMP_3.$$s || this;
if (t == null) t = nil;
          return t['$=='](self)}, TMP_3.$$s = self, TMP_3), $a).call($b);
          $opal.$return(nil);
          } else {
          return nil
        }}, TMP_2.$$s = self, TMP_2), $a).call($b);
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    def.$self_destruct = function(elapsed, game) {
      var $a, $b, TMP_4, self = this;

      self.age = self.age['$+'](elapsed);
      if (self.age['$>']($scope.get('MAX_AGE'))) {
        return ($a = ($b = game.$things())['$reject!'], $a.$$p = (TMP_4 = function(t){var self = TMP_4.$$s || this;
if (t == null) t = nil;
        return t['$=='](self)}, TMP_4.$$s = self, TMP_4), $a).call($b)
        } else {
        return nil
      };
    };

    return (def.$draw = function(d) {
      var $a, $b, self = this;

      (($a = [(($scope.get('Ship')).$$scope.get('COLOR'))]), $b = d, $b['$stroke_color='].apply($b, $a), $a[$a.length-1]);
      d.$push();
      d.$translate(self.position);
      d.$rotate_z((0.785)['$+'](self.direction));
      d.$stroke_rectangle(self.size['$/'](-2), self.size);
      return d.$pop();
    }, nil) && 'draw';
  })(self, $scope.get('Thing'))
};

/* Generated by Opal 0.7.0.dev */
Opal.modules["ship"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$[]', '$*', '$control', '$move', '$wrap', '$collide', '$pressing?', '$keyboard', '$+', '$-', '$pressed?', '$play', '$<<', '$things', '$new', '$along!', '$/', '$>', '$-@', '$x', '$x=', '$width', '$display', '$y', '$y=', '$height', '$each', '$respond_to?', '$colliding?', '$die', '$initialize', '$stroke_color=', '$push', '$translate', '$rotate_z', '$begin_shape', '$move_to', '$line_to', '$end_shape', '$stroke_shape', '$pop']);
  return (function($base, $super) {
    function $Ship(){};
    var self = $Ship = $klass($base, $super, 'Ship', $Ship);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.direction = def.position = def.thrusting = def.velocity = def.size = nil;
    $opal.cdecl($scope, 'COLOR', $scope.get('C')['$[]']("#ff8"));

    $opal.cdecl($scope, 'SPEED', 5);

    $opal.cdecl($scope, 'ROTATE_SPEED', 5);

    $opal.cdecl($scope, 'SHOOT_SOUND', $scope.get('Sound')['$[]']("shoot.wav"));

    $opal.cdecl($scope, 'DEATH_SOUND', $scope.get('Sound')['$[]']("explode.wav"));

    def.$initialize = TMP_1 = function(args) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
      self.size = $scope.get('V')['$[]'](32, 32);
      self.velocity = $scope.get('V')['$[]'](0, 0);
      self.direction = (($scope.get('Math')).$$scope.get('PI'))['$*'](1.5);
      return self.args = args;
    };

    def.$update = function(elapsed, game) {
      var self = this;

      self.$control(elapsed, game);
      self.$move(elapsed, game);
      self.$wrap(game);
      return self.$collide(game);
    };

    def.$control = function(elapsed, game) {
      var $a, self = this;

      if ((($a = game.$keyboard()['$pressing?']("right")) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.direction = self.direction['$+']($scope.get('ROTATE_SPEED')['$*'](elapsed))};
      if ((($a = game.$keyboard()['$pressing?']("left")) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.direction = self.direction['$-']($scope.get('ROTATE_SPEED')['$*'](elapsed))};
      self.thrusting = game.$keyboard()['$pressing?']("up");
      if ((($a = game.$keyboard()['$pressed?']("z")) !== nil && (!$a.$$is_boolean || $a == true))) {
        $scope.get('SHOOT_SOUND').$play();
        return game.$things()['$<<']($scope.get('Bullet').$new($hash2(["position", "direction"], {"position": self.position, "direction": self.direction})));
        } else {
        return nil
      };
    };

    def.$move = function(elapsed, game) {
      var $a, self = this;

      if ((($a = self.thrusting) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.velocity['$along!'](self.direction, $scope.get('SPEED')['$*'](elapsed))};
      return self.position = self.position['$+'](self.velocity);
    };

    def.$wrap = function(game) {
      var $a, $b, self = this, half_size = nil, left_overlap = nil, right_overlap = nil, top_overlap = nil, bottom_overlap = nil;

      half_size = self.size['$/'](2);
      if (((left_overlap = self.position.$x()['$-@']()['$-'](half_size.$x())))['$>'](0)) {
        (($a = [game.$display().$width()['$-'](left_overlap)['$+'](half_size.$y())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])
      } else if (((right_overlap = self.position.$x()['$-'](half_size.$x())['$-'](game.$display().$width())))['$>'](0)) {
        (($a = [right_overlap['$-'](half_size.$y())]), $b = self.position, $b['$x='].apply($b, $a), $a[$a.length-1])};
      if (((top_overlap = self.position.$y()['$-@']()['$-'](half_size.$y())))['$>'](0)) {
        return (($a = [game.$display().$height()['$-'](top_overlap)['$+'](half_size.$y())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
      } else if (((bottom_overlap = self.position.$y()['$-'](half_size.$y())['$-'](game.$display().$height())))['$>'](0)) {
        return (($a = [bottom_overlap['$-'](half_size.$y())]), $b = self.position, $b['$y='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    };

    def.$collide = function(game) {try {

      var $a, $b, TMP_2, self = this;

      return ($a = ($b = game.$things()).$each, $a.$$p = (TMP_2 = function(thing){var self = TMP_2.$$s || this, $a, $b;
        if (self.position == null) self.position = nil;
        if (self.args == null) self.args = nil;
if (thing == null) thing = nil;
      if ((($a = ($b = thing['$respond_to?']("colliding?"), $b !== false && $b !== nil ?thing['$colliding?'](self.position) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          thing.$die(game);
          $scope.get('DEATH_SOUND').$play();
          self.$initialize(self.args);
          $opal.$return(nil);
          } else {
          return nil
        }}, TMP_2.$$s = self, TMP_2), $a).call($b);
      } catch ($returner) { if ($returner === $opal.returner) { return $returner.$v } throw $returner; }
    };

    return (def.$draw = function(d) {
      var $a, $b, self = this;

      (($a = [$scope.get('COLOR')]), $b = d, $b['$stroke_color='].apply($b, $a), $a[$a.length-1]);
      d.$push();
      d.$translate(self.position);
      d.$rotate_z(self.direction['$+']((($scope.get('Math')).$$scope.get('PI'))['$/'](2)));
      d.$translate(self.size['$-@']()['$/'](2));
      d.$begin_shape();
      d.$move_to($scope.get('V')['$[]'](self.size.$x()['$/'](2), 0));
      d.$line_to($scope.get('V')['$[]'](self.size.$x(), self.size.$y()));
      d.$line_to($scope.get('V')['$[]'](self.size.$x()['$/'](2), self.size.$y()['$/'](2)));
      d.$line_to($scope.get('V')['$[]'](0, self.size.$y()));
      d.$line_to($scope.get('V')['$[]'](self.size.$x()['$/'](2), 0));
      d.$end_shape();
      d.$stroke_shape();
      if ((($a = self.thrusting) !== nil && (!$a.$$is_boolean || $a == true))) {
        d.$begin_shape();
        d.$move_to($scope.get('V')['$[]'](self.size.$x()['$/'](2), self.size.$y()['$/'](2)));
        d.$line_to($scope.get('V')['$[]'](self.size.$x()['$/'](2), self.size.$y()));
        d.$end_shape();
        d.$stroke_shape();};
      return d.$pop();
    }, nil) && 'draw';
  })(self, $scope.get('Thing'))
};

/* Generated by Opal 0.7.0.dev */
Opal.modules["things"] = function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$require']);
  self.$require("thing");
  self.$require("asteroid");
  self.$require("bullet");
  return self.$require("ship");
};

/* Generated by Opal 0.7.0.dev */
(function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$require', '$[]', '$attr_accessor', '$size=', '$display', '$<<', '$new', '$/', '$size', '$times', '$*', '$rand', '$width', '$height', '$stroke_width=', '$text_font=', '$text_size=', '$fill_color=', '$clear', '$each', '$nil?', '$update', '$draw', '$draw_help', '$private', '$fill_text']);
  self.$require("things");
  return (function($base, $super) {
    function $AsteroidsGame(){};
    var self = $AsteroidsGame = $klass($base, $super, 'AsteroidsGame', $AsteroidsGame);

    var def = self.$$proto, $scope = self.$$scope;

    def.things = nil;
    $opal.cdecl($scope, 'BG_COLOR', $scope.get('C')['$[]']("#013"));

    self.$attr_accessor("things");

    def.$setup = function() {
      var $a, $b, TMP_1, $c, self = this;

      (($a = [$scope.get('V')['$[]'](720, 720)]), $b = self.$display(), $b['$size='].apply($b, $a), $a[$a.length-1]);
      self.things = [];
      self.things['$<<']($scope.get('Ship').$new($hash2(["position"], {"position": self.$display().$size()['$/'](2)})));
      ($a = ($b = (6)).$times, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;
        if (self.things == null) self.things = nil;

      return self.things['$<<']($scope.get('Asteroid').$new($hash2(["position", "side_count"], {"position": $scope.get('V')['$[]'](self.$rand()['$*'](self.$display().$width()), self.$rand()['$*'](self.$display().$height())), "side_count": 6})))}, TMP_1.$$s = self, TMP_1), $a).call($b);
      (($a = [4]), $c = self.$display(), $c['$stroke_width='].apply($c, $a), $a[$a.length-1]);
      (($a = [$scope.get('Font')['$[]']("deja-vu-serif.ttf")]), $c = self.$display(), $c['$text_font='].apply($c, $a), $a[$a.length-1]);
      return (($a = [16]), $c = self.$display(), $c['$text_size='].apply($c, $a), $a[$a.length-1]);
    };

    def.$update = function(elapsed) {
      var $a, $b, TMP_2, self = this;

      (($a = [$scope.get('BG_COLOR')]), $b = self.$display(), $b['$fill_color='].apply($b, $a), $a[$a.length-1]);
      self.$display().$clear();
      ($a = ($b = self.things).$each, $a.$$p = (TMP_2 = function(t){var self = TMP_2.$$s || this, $a;
if (t == null) t = nil;
      if ((($a = t['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil;};
        t.$update(elapsed, self);
        return t.$draw(self.$display());}, TMP_2.$$s = self, TMP_2), $a).call($b);
      return self.$draw_help(self.$display());
    };

    self.$private();

    return (def.$draw_help = function(d) {
      var $a, $b, self = this;

      (($a = [$scope.get('C')['$[]']("#999")]), $b = d, $b['$fill_color='].apply($b, $a), $a[$a.length-1]);
      d.$fill_text("Left/Right - Turn", $scope.get('V')['$[]'](500, 100));
      d.$fill_text("Up - Thrust", $scope.get('V')['$[]'](500, 120));
      return d.$fill_text("z - Shoot", $scope.get('V')['$[]'](500, 140));
    }, nil) && 'draw_help';
  })(self, $scope.get('Game'));
})(Opal);

//# sourceMappingURL=game.map
;
